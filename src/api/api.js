const fetch = require("node-fetch");

const API_URL = "https://games-test.datsteam.dev/api";
const TOKEN = "27fa2e88-8672-431c-af5f-ee0d9701566e";
const HEADERS = {
  "Content-Type": "application/json",
  "X-Auth-Token": TOKEN,
};

// –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏ (–º—Å)
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// =======================
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
// =======================
async function registerPlayer() {
  try {
    const res = await fetch(`${API_URL}/register`, {
      method: "POST",
      headers: HEADERS,
    });
    if (!res.ok) {
      const err = await res.json();
      console.log(
        "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        err.message || res.statusText
      );
      return;
    }
    const data = await res.json();
    console.log("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ò–º—è:", data.name, "| –†–∞—É–Ω–¥:", data.realm);
  } catch (error) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞");
  }
}

// =======================
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ä–µ–Ω—ã
// =======================
async function getArena() {
  try {
    const res = await fetch(`${API_URL}/arena`, { headers: HEADERS });
    if (!res.ok) {
      const err = await res.json();
      throw new Error(err.message || res.statusText);
    }
    return await res.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –∞—Ä–µ–Ω—ã:", error.message || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞");
    return null;
  }
}

// =======================
// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞
// =======================
async function sendMove(moves) {
  try {
    const res = await fetch(`${API_URL}/move`, {
      method: "POST",
      headers: HEADERS,
      body: JSON.stringify({ moves }),
    });
    if (!res.ok) {
      const err = await res.json();
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ–¥–∞:", err.message || res.statusText);
      return false;
    }
    console.log("‚úÖ –•–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", moves);
    return true;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ–¥–∞:",
      error.message || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
    );
    return false;
  }
}

// =======================
// –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –º—É—Ä–∞–≤—å—ë–≤
// =======================
async function botLoop() {
  while (true) {
    const arena = await getArena();
    if (arena && arena.ants) {
      console.log(
        `üì¶ –•–æ–¥ #${arena.turnNo} | –ú—É—Ä–∞–≤—å—ë–≤: ${arena.ants.length} | –û—á–∫–∏: ${arena.score}`
      );
    }
    await delay(2500); // –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
  }
}

// =======================
// –ó–∞–ø—É—Å–∫
// =======================
(async () => {
  await registerPlayer();
  await delay(2000); // –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  await botLoop(); // –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
})();
